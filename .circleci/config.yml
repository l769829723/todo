# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports

  release:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: release application
          command: |
            git push origin master:release

  deploy:
    docker:
      - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4c:68:4e:d8:12:7a:d3:66:0e:3c:a6:68:98:df:a0:8a"
#      - run:
#          name: install deploy tool
#          command: |
#            sudo pip install ansible
      - run:
          name: run deploy
          environment:
            PROJECT_DIR: /var/www/todoapp
          command: |
            ssh -o "StrictHostKeyChecking no" ${SERVER_USERNAME}@${SERVER_ADDRESS} "rm -rf /tmp/app && mv ${PROJECT_DIR}/app /tmp/ && git clone -b release https://github.com/l769829723/todo.git ${PROJECT_DIR}/app && source ${PROJECT_DIR}/venv/bin/activate && cd ${PROJECT_DIR}/app/ && python manage.py db upgrade && python manage.py db migrate && systemctl restart todo.uwsgi && systemctl restart nginx"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - release:
          requires:
            - build
      - deploy:
          requires:
            - release